--- src/tModLoader/Terraria/NetMessage.cs
+++ src/Terraclient/Terraria/NetMessage.cs
@@ -15,6 +_,7 @@
 using Terraria.ModLoader;
 using Terraria.ModLoader.IO;
 using Terraria.Social;
+using Terraria.Terraclient;
 
 namespace Terraria
 {
@@ -95,7 +_,7 @@
 				writer.Write((byte)msgType);
 				switch (msgType) {
 					case 1:
-						writer.Write(BuildInfo.versionedName);
+						writer.Write(Client.PoseAsVanilla ? "Terraria" + Main.curRelease : BuildInfo.versionedName.Replace("Terraclient", "tModLoader"));
 						break;
 					case 2:
 						text.Serialize(writer);
@@ -113,6 +_,7 @@
 							writer.Write((byte)player5.hair);
 							writer.Write(player5.name);
 
+							// TODO: Is this safe?
 							if (ModNet.AllowVanillaClients)
 								PlayerIO.WriteByteVanillaHairDye(player5.hairDye, writer);
 							else
@@ -172,6 +_,7 @@
 							if (num8 < 0)
 								num8 = 0;
 
+							// TODO: Is this safe?
 							if (ModNet.AllowVanillaClients) {
 								ItemIO.WriteShortVanillaStack(num8, writer);
 								ItemIO.WriteByteVanillaPrefix(item5, writer);
@@ -544,7 +_,8 @@
 								value5 = (short)item7.netID;
 
 							writer.Write(value5);
+							if (!ModNet.AllowVanillaClients) 
-							ItemIO.SendModData(item7, writer);
+								ItemIO.SendModData(item7, writer);
 							break;
 						}
 					case 22:
@@ -722,6 +_,7 @@
 								value2 = 0;
 							*/
 
+							// TODO: Is this safe?
 							if (ModNet.AllowVanillaClients) {
 								ItemIO.WriteShortVanillaStack(item6, writer);
 								ItemIO.WriteByteVanillaPrefix(item6, writer);
@@ -774,7 +_,7 @@
 						else {
 							writer.Write((short)0);
 						}
-						if (number >= 100)
+						if (!ModNet.AllowVanillaClients && number >= 100)
 							writer.Write((ushort)number6);
 						break;
 					case 35:
@@ -1052,7 +_,7 @@
 							bool flag3 = TileEntity.ByID.ContainsKey(number);
 							writer.Write(flag3);
 							if (flag3)
-								TileEntity.Write(writer, TileEntity.ByID[number], networkSend: true, lightSend: true); //TML: Made lightSend true.
+								TileEntity.Write(writer, TileEntity.ByID[number], networkSend: true, lightSend: !ModNet.AllowVanillaClients); //TML: Made lightSend true.
 
 							break;
 						}
@@ -1115,6 +_,7 @@
 							writer.Write((short)number);
 							writer.Write((short)number2);
 							Item item3 = Main.player[(int)number4].inventory[(int)number3];
+							// TODO: Is this safe?
 							if (ModNet.AllowVanillaClients) {
 								ItemIO.WriteShortVanillaID(item3, writer);
 								ItemIO.WriteByteVanillaPrefix(item3, writer);
@@ -1293,6 +_,7 @@
 							writer.Write((short)number2);
 							Item item2 = Main.player[(int)number4].inventory[(int)number3];
 
+							// TODO: Is this safe?
 							if (ModNet.AllowVanillaClients) {
 								ItemIO.WriteShortVanillaID(item2, writer);
 								ItemIO.WriteByteVanillaPrefix(item2, writer);
@@ -1364,6 +_,7 @@
 							writer.Write((short)number2);
 							Item item = Main.player[(int)number4].inventory[(int)number3];
 
+							// TODO: Is this safe?
 							if (ModNet.AllowVanillaClients) {
 								ItemIO.WriteShortVanillaID(item, writer);
 								ItemIO.WriteByteVanillaPrefix(item, writer);
@@ -1418,7 +_,10 @@
 				// TODO: Make this int or some other solution. This used to be cast to short. NetMessage.CheckBytes reads ushort though, so changing this is fine. We want to allow for more data primarily because writing tile
 				// chunks can go more than 32767 (and even 65535) bytes. This is because ModTileEntities can have large amounts of data especially when they sync Items and instanced GlobalItem classes are in play.
 				// Complications include AllowVanillaClients, message length byte length negotiation, and MessageBuffer.readBuffer having a fixed size.
+				if (ModNet.AllowVanillaClients)
+					writer.Write((short)num26);
+				else
-				writer.Write((ushort)num26);
+					writer.Write((ushort)num26);
 				writer.BaseStream.Position = num26;
 				if (Main.netMode == 1) {
 					if (Netplay.Connection.Socket.IsConnected()) {
@@ -1921,17 +_,18 @@
 				writer.Write(sign.text);
 			}
 
+			if (!ModNet.AllowVanillaClients)
-			foreach (var item in TileEntity.ByPosition) {
+				foreach (var item in TileEntity.ByPosition) {
-				Point16 pos = item.Key;
+					Point16 pos = item.Key;
-				if (pos.X >= xStart && pos.X < xStart + width && pos.Y >= yStart && pos.Y < yStart + height) {
+					if (pos.X >= xStart && pos.X < xStart + width && pos.Y >= yStart && pos.Y < yStart + height) {
-					if (item.Value.type > 2)
+						if (item.Value.type > 2)
-						array3[num3++] = (short)item.Value.ID;
+							array3[num3++] = (short)item.Value.ID;
+					}
 				}
-			}
 
 			writer.Write(num3);
 			for (int m = 0; m < num3; m++) {
-				TileEntity.Write(writer, TileEntity.ByID[array3[m]], networkSend: true); //TML: Made networkSend true, but lightSend should be false.
+				TileEntity.Write(writer, TileEntity.ByID[array3[m]], networkSend: !ModNet.AllowVanillaClients); //TML: Made networkSend true, but lightSend should be false.
 			}
 		}
 
@@ -2127,7 +_,7 @@
 
 			num3 = reader.ReadInt16();
 			for (int m = 0; m < num3; m++) {
-				TileEntity tileEntity = TileEntity.Read(reader, networkSend: true); //TML: Made networkSend true, but lightSend should be false.
+				TileEntity tileEntity = TileEntity.Read(reader, networkSend: !ModNet.AllowVanillaClients); //TML: Made networkSend true, but lightSend should be false.
 				TileEntity.ByID[tileEntity.ID] = tileEntity;
 				TileEntity.ByPosition[tileEntity.Position] = tileEntity;
 			}
@@ -2451,7 +_,8 @@
 					SendData(5, toWho, fromWho, null, plr, 94 + m, (int)Main.player[plr].miscDyes[m].prefix);
 				}
 
+				if (!ModNet.AllowVanillaClients) 
-				PlayerLoader.SyncPlayer(Main.player[plr], toWho, fromWho, false);
+					PlayerLoader.SyncPlayer(Main.player[plr], toWho, fromWho, false);
 				if (!Netplay.Clients[plr].IsAnnouncementCompleted) {
 					Netplay.Clients[plr].IsAnnouncementCompleted = true;
 					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.mp[19].Key, Main.player[plr].name), new Color(255, 240, 20), plr);
