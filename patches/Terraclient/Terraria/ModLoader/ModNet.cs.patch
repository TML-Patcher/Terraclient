--- src/tModLoader/Terraria/ModLoader/ModNet.cs
+++ src/Terraclient/Terraria/ModLoader/ModNet.cs
@@ -13,6 +_,7 @@
 using Terraria.ModLoader.UI.DownloadManager;
 using Terraria.ModLoader.UI;
 using Terraria.GameContent;
+using Terraria.Terraclient;
 using Terraria.UI;
 
 namespace Terraria.ModLoader
@@ -52,6 +_,10 @@
 			}
 		}
 
+		/// <summary>
+		///		In tModLoader, this is essentially non-functional. There are some implementations, but it goes unused. <br />
+		///		In Terraclient, we use it and expand upon it for vanilla server compatibility. In Terraclient, this disables all modded networking.
+		/// </summary>
 		public static bool AllowVanillaClients { get; internal set; }
 		internal static bool downloadModsFromServers = true;
 		internal static bool onlyDownloadSignedMods = false;
@@ -65,7 +_,7 @@
 		public static Mod GetMod(int netID) =>
 			netID >= 0 && netID < netMods.Length ? netMods[netID] : null;
 
-		public static int NetModCount => netMods.Length;
+		public static int NetModCount => netMods?.Length ?? 0;
 
 		private static Queue<ModHeader> downloadQueue = new Queue<ModHeader>();
 		internal static List<NetConfig> pendingConfigs = new List<NetConfig>();
@@ -81,8 +_,8 @@
 
 		internal static void Unload() {
 			netMods = null;
-			if (!Main.dedServ && Main.netMode != 1) //disable vanilla client compatibility restrictions when reloading on a client
+			if (!Main.dedServ && Main.netMode != 1) // disable vanilla client compatibility restrictions when reloading on a client
-				AllowVanillaClients = false;
+				AllowVanillaClients = Client.ConnectToVanillaServers;
 		}
 
 		internal static void SyncMods(int clientIndex) {
